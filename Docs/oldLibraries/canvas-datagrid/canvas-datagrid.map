{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 48a60efaa640187de965","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","intf","eval","createGrid","forEach","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","dispose","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","hyphenateProperty","prop","cust","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","applyComponentStyle","supressChangeAndDrawEvents","cStyle","getComputedStyle","defs","computedStyle","def","val","getPropertyValue","style","typeMap","draw","dispatchEvent","data","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","test","string","str","attrs","attr","push","initialized","parentNode","observe","keys","arg","resize","key","set","value","attrName","oldVal","newVal","tfn","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","document","querySelectorAll","el","drawPerfLine","w","h","x","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","drawHtml","cell","img","v","formattedValue","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","columnHeaderOrderByArrowMarginLeft","columnHeaderOrderByArrowMarginTop","orderDirection","columnHeaderOrderByArrowWidth","columnHeaderOrderByArrowHeight","fill","columnHeaderOrderByArrowMarginRight","drawTreeArrow","treeArrowColor","treeArrowBorderColor","treeArrowMarginLeft","treeArrowMarginTop","openChildren","uniqueId","treeArrowWidth","treeArrowHeight","treeArrowMarginRight","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","addEllipsis","ellipsisCache","measureText","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","rowIndex","indexOf","columnIndex","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","active","activeCell","isGrid","activeHeader","orders","rows","columns","f","formatters","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","columnWidth","cellBorderWidth","visibleRows","nodeType","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","clip","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","columnHeaderCellWidth","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","isChildGrid","requestAnimationFrame","u","currentCell","rowHeaderCellHeight","getRowHeaderCellHeight","getColumnHeaderCellWidth","performance","now","createRowOrders","getVisibleSchema","scale","devicePixelRatio","backgroundColor","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","columnHeaderCell","rArgs","showColumnHeaders","order","isHeaderCell","endCap","reorderObject","dragOffset","heigth","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","dragMode","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","gridBorderWidth","gridBorderColor","showPerformance","debug","fillArray","pop","perf","reduce","min","toFixed","htmlImages","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","entities","hasFocus","dragContext","dpl","pw","ph","calculateCssSize","sizeString","parentSize","parseFloat","wheeling","stopPropagation","fn","events","removeEventListener","sfn","idx","splice","preventDefault","defaultPrevented","resizeDomElement","parentIsCanvas","shadowRootParentElement","parentDOMNode","canvas","drawAfterResize","cellBorder","columnHeaderCellBorder","columnHeaderCellBorderWidth","accumulator","column","hidden","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","controlKey","metaKey","persistantSelectionMode","getSchema","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","cellBoundaryCrossed","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","bottom","right","ignoreNextClick","selectRow","dragAddToSelection","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","selectionChanged","selectedData","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","body","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","reorderTarget","stopDragReorder","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","mousedown","lastMouseDownTarget","button","move","requestPointerLock","concat","dragging","mouseup","controlInput","focus","keydown","last","cols","keyCode","beginEditAt","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","map","colKey","substring","split","sel","cellData","colIndex","cName","yi","paste","clipboardData","items","dti","getAsString","cut","copy","fCopyCell","replace","trows","sData","rt","join","setData","touchScrollTimeout","animationFrames","getTouchPos","rect","getBoundingClientRect","touches","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","touchingCell","touchstart","disposeContextMenu","touchContextTimeout","touchStartEvent","touchScrollStart","contextmenuEvent","touchContextMenuTimeMs","setInterval","startingCell","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","touchPosition","rh","cw","selectionScrollZone","sbw","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","frozenRows","currentFilter","sorters","schemaHashes","uId","changes","componentL1Events","eventNames","expandToRow","col","low","high","step","columnHeaderCellHeight","localStorage","setItem","stringify","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","colName","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getFontHeight","fontStyle","parseStyleValue","initProp","propName","publicStyleKeyIntf","initScrollBox","setDom","webKit","navigator","userAgent","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","assertPxColor","clearPxColorAssertions","integerToAlpha","shadowRoot","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","getItem","blur","TypeError","normalizeDataset","callback","syncFnInvoked","0","eventName","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","createElement","addContent","content","appendChild","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","position","contextMenuArrowColor","textAlign","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","en","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextMenuMarginLeft","contextMenuMarginTop","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","bx2","getVisibleCellByIndex","editCell","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","option","valueInEnum","enu","multiLine","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","fontSize","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","boxSizing","canvas-datagrid-control-input","canvas-datagrid-edit-input","outline","margin","editCellPaddingLeft","editCellFontFamily","editCellFontSize","boxShadow","editCellBoxShadow","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-context-menu-item","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu","whiteSpace","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","tagName","shadowCss","parentElement","getContext","textBaseline","createShadowRoot","attachShadow","mode","ordA","charCodeAt","ordZ","len","fromCharCode","floor","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","rowId","childGrid","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","offsetY","xi","cidx","isColumnVisible","isRowVisible","useTouchScrollZones","moveBorder","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,WACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GE7EjC,GAAAyB,GAAAC,CAEAD,UA+PCE,MA/PDD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAC,UACAC,aACA,6BACA,yBACA,iCACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,yBACA,8BACA,wBACA,mDACA,kCACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,oBACA,aACA,gBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,YACA,4BAEAC,SACA,uDACA,mDACA,8BACA,uCACA,qCACA,4DACA,4CACA,yDACA,oCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6CACA,6BACA,iDACA,6CACA,uBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,+BACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,oCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,oBACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,8BACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,6CACA,sBACA,kBACA,sBACA,iBACA,oBACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,mCACA,iDACA,0BACA,iCACA,wDACA,oCACA,kDACA,2BACA,2BACA,4CACA,sBACA,0BACA,2BACA,yBACA,sBACA,uBACA,oBAICC,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,IFqFK,SAAU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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['clipboardMimeType', 'text/html'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (defaults) {\n    'use strict';\n    return function (self) {\n        self = self || {};\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(intf, self, supressChangeAndDrawEvents) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            self.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val !== \"\") {\n                    self.style[def[0]] = typeMap[typeof def[1]](val, def[1]);\n                }\n            });\n            self.draw(true);\n            if (!supressChangeAndDrawEvents) {\n                self.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.connectedCallback = function () {\n            var intf = this, s;\n            if (intf.initialized) { return; }\n            intf.initialized = true;\n            intf.args.parentNode = intf;\n            intf.args.attributes = intf.attributes;\n            //HACK init() will secretly return the internal reference object.\n            //since init is only run after instantiation in the component version\n            //it won't work in the amd version and won't return self, so it is still\n            //technically private since it's impossible to get at.\n            //this has to be done so intf setters can bet run and alter self without stack overflows\n            //intf.style.display = 'block';\n            s = intf.init();\n            component.observe(intf, s);\n            applyComponentStyle(intf, s, true);\n            Object.keys(intf.args.attributes).forEach(function (arg) {\n                if (intf.attributes[arg] === undefined) { return; }\n                intf.attributes[arg] = intf.args.attributes[arg];\n            });\n            s.resize();\n            ['style', 'data', 'schema'].forEach(function (key) {\n                Object.defineProperty(intf.args, key, {\n                    set: function (value) {\n                        s[key] = value;\n                        intf.draw();\n                    },\n                    get: function () {\n                        return s[key];\n                    }\n                });\n            });\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf, self) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            self.applyComponentStyle = function () { applyComponentStyle(intf, self); self.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            intf.applyComponentStyle = self.applyComponentStyle;\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        self.applyComponentStyle();\n                        return;\n                    }\n                    if (mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle();\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        self.component = component;\n        return component;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && self.attributes.selectionHandleBehavior !== 'none') {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = self.style[cellStyle + 'Font'];\n                            cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + self.style.cellBorderWidth;\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = self.width - columnHeaderCellWidth - self.style.scrollBarWidth,\n                    ph = self.height - rowHeaderCellHeight - self.style.scrollBarWidth;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(perfArr, arrIndex, max, color, useAbs) {\n                    drawPerfLine(pw, ph, columnHeaderCellWidth, rowHeaderCellHeight, perfArr, arrIndex, max, color, useAbs);\n                }\n                [[scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'fuchsia'],\n                    [scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'green'],\n                    [perfCounters, undefined, 100, 'red'],\n                    [entityCount, undefined, 500, 'blue'],\n                    [touchPPSCounters, 0, 10000, 'orange', true],\n                    [touchPPSCounters, 1, 10000, 'purple', true]\n                    ].forEach(function (i) { dpl.apply(null, i); });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n                self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                fillText('Red = Draw time, Blue = Entities, Fuchsia/Green = Scroll, Orange/Purple = Touch PPS', columnHeaderCellWidth + 300, rowHeaderCellHeight);\n            }\n            function drawDebug() {\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) { return; }\n                self.ctx.font = '11px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                    fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                    self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                    fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                });\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        function calculateCssSize(sizeString, parentSize) {\n            var p;\n            if (sizeString === 'auto' || sizeString === '') { return parentSize; }\n            if (/%/.test(sizeString)) {\n                p = parseFloat(sizeString, 10);\n                return parentSize * (p * 0.01);\n            }\n            return parseFloat(sizeString, 10);\n        }\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resizeDomElement = function () {\n            if (!self.parentIsCanvas) {\n                if (self.shadowRootParentElement) {\n                    // shadow dom browsers\n                    self.width = calculateCssSize(self.style.width, self.shadowRootParentElement.offsetWidth);\n                    self.height = calculateCssSize(self.style.height, self.shadowRootParentElement.offsetHeight);\n                    // self.intf.style.width = self.height + 'px';\n                    // self.intf.style.height = self.height + 'px';\n                } else {\n                    // pre shadow dom browsers\n                    self.width = self.parentDOMNode.offsetWidth;\n                    self.height = self.parentDOMNode.offsetHeight;\n                }\n                self.canvas.style.width = self.width + 'px';\n                self.canvas.style.height = self.height + 'px';\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n            }\n            self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.resizeDomElement();\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            wheeling = setTimeout(function () {\n                if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                    return;\n                }\n                e = e.NativeEvent || e;\n                self.touchHaltAnimation = true;\n                l = self.scrollBox.scrollLeft;\n                t = self.scrollBox.scrollTop;\n                if (self.hasFocus) {\n                    //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                    //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                    if (deltaMode === 1) {\n                        // line mode = 17 pixels per line\n                        deltaY = deltaY * 17;\n                    }\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }\n                if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                    e.preventDefault();\n                }\n                wheeling = undefined;\n            }, 1);\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            //TODO remove selected data\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            self.touchStart = self.getTouchPos(e);\n            self.touchScrollStart = {\n                x: self.scrollBox.scrollLeft,\n                y: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.touchDelta = {\n                x: 0,\n                y: 0,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: self.touchScrollStart.t\n            };\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: self.touchDelta.t\n            };\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: self.touchDelta.t\n            };\n            self.touchContextTimeout = setTimeout(function () {\n                self.contextmenuEvent(e, self.touchStart);\n            }, self.attributes.touchContextMenuTimeMs);\n            self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n            self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.startingCell.isHeader) {\n                if (self.startingCell.isRowHeader) {\n                    self.selectArea({\n                        top: self.startingCell.rowIndex,\n                        bottom: self.startingCell.rowIndex,\n                        left: 0,\n                        right: self.getSchema().length - 1,\n                    });\n                    self.draw();\n                } else if (self.startingCell.isColumnHeader) {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === self.startingCell.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(self.startingCell.header.name, self.orderDirection);\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectArea({\n                            top: 0,\n                            bottom: self.data.length - 1,\n                            left: self.startingCell.columnIndex,\n                            right: self.startingCell.columnIndex,\n                        });\n                        self.draw();\n                    }\n                }\n                self.touchEndEvents(e);\n                return;\n            }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw();\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw();\n        };\n        self.touchmove = function (e) {\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            clearTimeout(self.touchContextTimeout);\n            self.touchPosition = self.getTouchPos(e);\n            var rh = self.getRowHeaderCellHeight(),\n                cw = self.getColumnHeaderCellWidth(),\n                rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone,\n                lScrollZone = self.touchPosition.x - cw < self.attributes.selectionScrollZone,\n                bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone,\n                tScrollZone = self.touchPosition.y - rh < self.attributes.selectionScrollZone,\n                sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - rh - sbw) / (self.scrollBox.height - sbw - rh));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - cw - sbw) / (self.scrollBox.width - sbw - cw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw();\n        };\n        self.touchEndEvents = function (e) {\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRows = [];\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDatagrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                return;\n            }\n            if (key === 'moveOverlayBorderSegments') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseStyleValue(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDatagrid\n             * @property hasFocus\n            */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            if (!self.args.component) {\n                Object.defineProperty(self.intf, 'style', {\n                    get: function () {\n                        return publicStyleKeyIntf;\n                    },\n                    set: function (value) {\n                        Object.keys(value).forEach(function (key) {\n                            self.parseStyleValue(value);\n                            self.style[key] = value[key];\n                        });\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                    }\n                });\n            }\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRows', {\n            get: function () {\n                return self.frozenRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 9000, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.draw();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.hideColumnText\n                        .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        e.cell.header.hidden = true;\n                        ev.preventDefault();\n                        self.stopPropagation(ev);\n                        self.disposeContextMenu();\n                        setTimeout(self.draw, 10);\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 9000;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                //HACK for IE10, does not like literal enum\n                enu = cell.header['enum'],\n                option,\n                valueInEnum;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.shadowCss = document.createElement('style');\n                    self.shadowCss.innerHTML = ':host canvas { display:flex; flex-direction: column; padding: 0; margin: 0; }';\n                    self.parentDOMNode = self.parentNode.parentElement;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.shadowCss);\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                if (this.isComponent) {\n                    self.shadowRootParentElement = self.args.parentNode.parentElement;\n                } else {\n                    self.shadowRootParentElement = self.args.parentNode;\n                }\n                self.shadowRoot = self.args.parentNode.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n                self.args.parentNode = self.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 48a60efaa640187de965","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['clipboardMimeType', 'text/html'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function (self) {\n        self = self || {};\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(intf, self, supressChangeAndDrawEvents) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            self.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val !== \"\") {\n                    self.style[def[0]] = typeMap[typeof def[1]](val, def[1]);\n                }\n            });\n            self.draw(true);\n            if (!supressChangeAndDrawEvents) {\n                self.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.connectedCallback = function () {\n            var intf = this, s;\n            if (intf.initialized) { return; }\n            intf.initialized = true;\n            intf.args.parentNode = intf;\n            intf.args.attributes = intf.attributes;\n            //HACK init() will secretly return the internal reference object.\n            //since init is only run after instantiation in the component version\n            //it won't work in the amd version and won't return self, so it is still\n            //technically private since it's impossible to get at.\n            //this has to be done so intf setters can bet run and alter self without stack overflows\n            //intf.style.display = 'block';\n            s = intf.init();\n            component.observe(intf, s);\n            applyComponentStyle(intf, s, true);\n            Object.keys(intf.args.attributes).forEach(function (arg) {\n                if (intf.attributes[arg] === undefined) { return; }\n                intf.attributes[arg] = intf.args.attributes[arg];\n            });\n            s.resize();\n            ['style', 'data', 'schema'].forEach(function (key) {\n                Object.defineProperty(intf.args, key, {\n                    set: function (value) {\n                        s[key] = value;\n                        intf.draw();\n                    },\n                    get: function () {\n                        return s[key];\n                    }\n                });\n            });\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf, self) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            self.applyComponentStyle = function () { applyComponentStyle(intf, self); self.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            intf.applyComponentStyle = self.applyComponentStyle;\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        self.applyComponentStyle();\n                        return;\n                    }\n                    if (mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle();\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        self.component = component;\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && self.attributes.selectionHandleBehavior !== 'none') {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = self.style[cellStyle + 'Font'];\n                            cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + self.style.cellBorderWidth;\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = self.width - columnHeaderCellWidth - self.style.scrollBarWidth,\n                    ph = self.height - rowHeaderCellHeight - self.style.scrollBarWidth;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(perfArr, arrIndex, max, color, useAbs) {\n                    drawPerfLine(pw, ph, columnHeaderCellWidth, rowHeaderCellHeight, perfArr, arrIndex, max, color, useAbs);\n                }\n                [[scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'fuchsia'],\n                    [scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'green'],\n                    [perfCounters, undefined, 100, 'red'],\n                    [entityCount, undefined, 500, 'blue'],\n                    [touchPPSCounters, 0, 10000, 'orange', true],\n                    [touchPPSCounters, 1, 10000, 'purple', true]\n                    ].forEach(function (i) { dpl.apply(null, i); });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n                self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                fillText('Red = Draw time, Blue = Entities, Fuchsia/Green = Scroll, Orange/Purple = Touch PPS', columnHeaderCellWidth + 300, rowHeaderCellHeight);\n            }\n            function drawDebug() {\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) { return; }\n                self.ctx.font = '11px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                    fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                    self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                    fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                });\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        function calculateCssSize(sizeString, parentSize) {\n            var p;\n            if (sizeString === 'auto' || sizeString === '') { return parentSize; }\n            if (/%/.test(sizeString)) {\n                p = parseFloat(sizeString, 10);\n                return parentSize * (p * 0.01);\n            }\n            return parseFloat(sizeString, 10);\n        }\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resizeDomElement = function () {\n            if (!self.parentIsCanvas) {\n                if (self.shadowRootParentElement) {\n                    // shadow dom browsers\n                    self.width = calculateCssSize(self.style.width, self.shadowRootParentElement.offsetWidth);\n                    self.height = calculateCssSize(self.style.height, self.shadowRootParentElement.offsetHeight);\n                    // self.intf.style.width = self.height + 'px';\n                    // self.intf.style.height = self.height + 'px';\n                } else {\n                    // pre shadow dom browsers\n                    self.width = self.parentDOMNode.offsetWidth;\n                    self.height = self.parentDOMNode.offsetHeight;\n                }\n                self.canvas.style.width = self.width + 'px';\n                self.canvas.style.height = self.height + 'px';\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n            }\n            self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.resizeDomElement();\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            wheeling = setTimeout(function () {\n                if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                    return;\n                }\n                e = e.NativeEvent || e;\n                self.touchHaltAnimation = true;\n                l = self.scrollBox.scrollLeft;\n                t = self.scrollBox.scrollTop;\n                if (self.hasFocus) {\n                    //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                    //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                    if (deltaMode === 1) {\n                        // line mode = 17 pixels per line\n                        deltaY = deltaY * 17;\n                    }\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }\n                if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                    e.preventDefault();\n                }\n                wheeling = undefined;\n            }, 1);\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            //TODO remove selected data\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            self.touchStart = self.getTouchPos(e);\n            self.touchScrollStart = {\n                x: self.scrollBox.scrollLeft,\n                y: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.touchDelta = {\n                x: 0,\n                y: 0,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: self.touchScrollStart.t\n            };\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: self.touchDelta.t\n            };\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: self.touchDelta.t\n            };\n            self.touchContextTimeout = setTimeout(function () {\n                self.contextmenuEvent(e, self.touchStart);\n            }, self.attributes.touchContextMenuTimeMs);\n            self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n            self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.startingCell.isHeader) {\n                if (self.startingCell.isRowHeader) {\n                    self.selectArea({\n                        top: self.startingCell.rowIndex,\n                        bottom: self.startingCell.rowIndex,\n                        left: 0,\n                        right: self.getSchema().length - 1,\n                    });\n                    self.draw();\n                } else if (self.startingCell.isColumnHeader) {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === self.startingCell.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(self.startingCell.header.name, self.orderDirection);\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectArea({\n                            top: 0,\n                            bottom: self.data.length - 1,\n                            left: self.startingCell.columnIndex,\n                            right: self.startingCell.columnIndex,\n                        });\n                        self.draw();\n                    }\n                }\n                self.touchEndEvents(e);\n                return;\n            }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw();\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw();\n        };\n        self.touchmove = function (e) {\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            clearTimeout(self.touchContextTimeout);\n            self.touchPosition = self.getTouchPos(e);\n            var rh = self.getRowHeaderCellHeight(),\n                cw = self.getColumnHeaderCellWidth(),\n                rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone,\n                lScrollZone = self.touchPosition.x - cw < self.attributes.selectionScrollZone,\n                bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone,\n                tScrollZone = self.touchPosition.y - rh < self.attributes.selectionScrollZone,\n                sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - rh - sbw) / (self.scrollBox.height - sbw - rh));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - cw - sbw) / (self.scrollBox.width - sbw - cw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw();\n        };\n        self.touchEndEvents = function (e) {\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRows = [];\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDatagrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                return;\n            }\n            if (key === 'moveOverlayBorderSegments') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseStyleValue(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDatagrid\n             * @property hasFocus\n            */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            if (!self.args.component) {\n                Object.defineProperty(self.intf, 'style', {\n                    get: function () {\n                        return publicStyleKeyIntf;\n                    },\n                    set: function (value) {\n                        Object.keys(value).forEach(function (key) {\n                            self.parseStyleValue(value);\n                            self.style[key] = value[key];\n                        });\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                    }\n                });\n            }\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRows', {\n            get: function () {\n                return self.frozenRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 9000, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.draw();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.hideColumnText\n                        .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        e.cell.header.hidden = true;\n                        ev.preventDefault();\n                        self.stopPropagation(ev);\n                        self.disposeContextMenu();\n                        setTimeout(self.draw, 10);\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 9000;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                //HACK for IE10, does not like literal enum\n                enu = cell.header['enum'],\n                option,\n                valueInEnum;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.shadowCss = document.createElement('style');\n                    self.shadowCss.innerHTML = ':host canvas { display:flex; flex-direction: column; padding: 0; margin: 0; }';\n                    self.parentDOMNode = self.parentNode.parentElement;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.shadowCss);\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                if (this.isComponent) {\n                    self.shadowRootParentElement = self.args.parentNode.parentElement;\n                } else {\n                    self.shadowRootParentElement = self.args.parentNode;\n                }\n                self.shadowRoot = self.args.parentNode.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n                self.args.parentNode = self.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}